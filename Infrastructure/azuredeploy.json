{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "applicationInsightsName": {
      "type": "string",
      "defaultValue": "deleteme"
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "deleteme"
    },
    "signalRName": {
      "type": "string",
      "defaultValue": "deleteme"
    },
    "cosmosDBName": {
      "type": "string",
      "defaultValue": "deleteme"
    },
    "frontDoorName": {
      "type": "string",
      "defaultValue": "deleteme"
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": "deleteme"
    },
    "functionAppName": {
      "type": "string",
      "defaultValue": "deleteme"
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "deleteme"
    }
  },
  "variables": {
    "tenantId": "[subscription().tenantId]",
    "location": "[resourceGroup().location]",
    "applicationInsightsName": "[concat(parameters('applicationInsightsName'), '-ai')]",
    "storageAccountName": "[concat('stor', parameters('storageAccountName'))]",
    "signalRName": "[concat(parameters('signalRName'), '-sr')]",
    "cosmosDBName": "[concat(parameters('cosmosDBName'), '-cd')]",
    "appServicePlanName": "[concat(parameters('appServicePlanName'), '-asp')]",
    "functionAppName": "[concat(parameters('functionAppName'), '-fa')]",
    "keyVaultName": "[concat(parameters('keyVaultName'), '-kv')]",
    "frontDoorName": "[concat(parameters('frontDoorName'), '-fd')]",
    "signalRConnectionSecretName": "signalr-connection",
    "cosmosDBSecretName": "cosmosdb-connection",
    "siteAddressPostfix": ".z6.web.core.windows.net"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "location": "[variables('location')]",
      "apiVersion": "2019-04-01",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"

      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": false,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      },
      "resources": [
        {
          "type": "blobServices/containers",
          "apiVersion": "2019-04-01",
          "name": "[concat('default/', '$web')]",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ],
          "properties": {
            "publicAccess": "None"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "[providers('Microsoft.Insights', 'components').apiVersions[0]]",
      "name": "[variables('applicationInsightsName')]",
      "location": "[variables('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest",
        "output": {

        }
      }
    },
    {
      "type": "Microsoft.SignalRService/SignalR",
      "apiVersion": "2018-10-01",
      "name": "[variables('signalRName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Free_F1",
        "tier": "Free",
        "size": "F1",
        "capacity": 1
      },
      "properties": {
        "hostNamePrefix": "[variables('signalRName')]",
        "features": [
          {
            "flag": "ServiceMode",
            "value": "Serverless",
            "properties": {}
          }
        ]
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2019-08-01",
      "name": "[variables('cosmosDBName')]",
      "location": "[variables('location')]",
      "tags": {
        "defaultExperience": "Core (SQL)",
        "hidden-cosmos-mmspecial": ""
      },
      "kind": "GlobalDocumentDB",
      "properties": {
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": false,
        "isVirtualNetworkFilterEnabled": false,
        "virtualNetworkRules": [],
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session",
          "maxIntervalInSeconds": 5,
          "maxStalenessPrefix": 100
        },
        "locations": [
          {
            "locationName": "[variables('location')]",
            "provisioningState": "Succeeded",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "capabilities": []
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2016-09-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "functionapp",
      "properties": {
        "name": "[variables('appServicePlanName')]",
        "perSiteScaling": false,
        "reserved": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "apiVersion": "2018-02-14",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ],
      "properties": {
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "tenantId": "[variables('tenantId')]",
        "sku": {
          "name": "Standard",
          "family": "A"
        },
        "networkAcls": {
          "value": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
          }
        },
        "accessPolicies": [
          {
            "objectId": "[reference(concat(resourceId('Microsoft.Web/sites', variables('functionAppName')), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2018-11-30').principalId]",
            "tenantId": "[variables('tenantId')]",
            "permissions": {
              "keys": [],
              "secrets": [
                "Get"
              ],
              "certificates": []
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyVaultName'), '/', variables('cosmosDBSecretName'))]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBName'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[concat('AccountEndpoint=https://', variables('cosmosDBName'), '.documents.azure.com:443/;AccountKey=', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBName')), providers('Microsoft.DocumentDB','databaseAccounts').apiVersions[0]).primaryMasterKey, ';')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyVaultName'), '/', variables('signalRConnectionSecretName'))]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.SignalRService/SignalR', variables('signalRName'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[listKeys(resourceId('Microsoft.SignalRService/SignalR', variables('signalRName')), providers('Microsoft.SignalRService','SignalR').apiVersions[0]).primaryConnectionString]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2019-08-01",
      "name": "[variables('functionAppName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      ],
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "resources": [
        {
          "type": "config",
          "name": "appsettings",
          "apiVersion": "2019-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('signalRConnectionSecretName'))]"
          ],
          "properties": {
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), providers('Microsoft.Insights', 'components').apiVersions[0]).InstrumentationKey]",
            "FUNCTIONS_WORKER_RUNTIME": "dotnet",
            "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]",
            "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]",
            "FUNCTIONS_EXTENSION_VERSION": "~3",
            "WEBSITE_CONTENTSHARE": "[toLower(variables('functionAppName'))]",
            "CollectionId": "Items",
            "DatabaseId": "Subscriptions",
            "SignalRConnection": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId(resourceGroup().name, 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('signalRConnectionSecretName'))).secretUriWithVersion, ')')]"
          }
        },
        {
          "type": "config",
          "name": "connectionstrings",
          "apiVersion": "2019-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('cosmosDBSecretName'))]"
          ],
          "properties": {
            "ms-account-profile-informationDBConnection": {
              "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId(resourceGroup().name, 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('cosmosDBSecretName'))).secretUriWithVersion, ')')]",
              "type": "Custom"
            }
          }
        }
      ],
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('functionAppName'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('functionAppName'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "reserved": false,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "siteConfig": {
          "appSettings": [],
          "connectionStrings": []
        }
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2016-08-01",
      "name": "[concat(variables('functionAppName'), '/web')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "use32BitWorkerProcess": false,
        "cors": {
          "allowedOrigins": [
            "[concat('https://', variables('frontDoorName'), '.azurefd.net')]"
          ],
          "supportCredentials": false
        },
        "http20Enabled": true,
        "minTlsVersion": "1.2"
      }
    },
    {
      "type": "Microsoft.Network/frontdoors/rulesengines",
      "apiVersion": "2020-05-01",
      "name": "[concat(variables('frontDoorName'), '/Redirect')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/frontdoors', variables('frontDoorName'))]"
      ],
      "properties": {
        "resourceState": "Enabled",
        "rules": [
          {
            "priority": 0,
            "name": "Redirect",
            "matchProcessingBehavior": "Stop",
            "action": {
              "requestHeaderActions": [],
              "responseHeaderActions": [],
              "routeConfigurationOverride": {
                "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration",
                "redirectProtocol": "HttpsOnly",
                "redirectType": "Found"
              }
            },
            "matchConditions": [
              {
                "rulesEngineMatchValue": [
                  "HTTP"
                ],
                "rulesEngineMatchVariable": "RequestScheme",
                "rulesEngineOperator": "Equal",
                "transforms": [],
                "negateCondition": false
              }
            ]
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/frontdoors",
      "apiVersion": "2020-05-01",
      "name": "[variables('frontDoorName')]",
      "location": "Global",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Network/frontdoors/rulesengines', variables('frontDoorName'), 'Redirect')]"
      ],
      "properties": {
        "resourceState": "Enabled",
        "backendPools": [
          {
            "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/BackendPools/ms-account-profile-information-site')]",
            "name": "ms-account-profile-information-site",
            "properties": {
              "backends": [
                {
                  "address": "[concat(variables('storageAccountName'), variables('siteAddressPostfix'))]",
                  "httpPort": 80,
                  "httpsPort": 443,
                  "priority": 1,
                  "weight": 50,
                  "backendHostHeader": "[concat(variables('storageAccountName'), variables('siteAddressPostfix'))]",
                  "enabledState": "Enabled"
                }
              ],
              "healthProbeSettings": {
                "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/HealthProbeSettings/healthProbeSettings1')]"
              },
              "loadBalancingSettings": {
                "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/LoadBalancingSettings/loadBalancingSettings1')]"
              },
              "resourceState": "Enabled"
            }
          }
        ],
        "healthProbeSettings": [
          {
            "name": "healthProbeSettings1",
            "properties": {
              "intervalInSeconds": 30,
              "path": "/index.html",
              "protocol": "Https",
              "resourceState": "Enabled"
            }
          }
        ],
        "frontendEndpoints": [
          {
            "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/FrontendEndpoints/ms-account-profile-information-fd-azurefd-net')]",
            "name": "ms-account-profile-information-fd-azurefd-net",
            "properties": {
              "hostName": "[concat(variables('frontDoorName'), '.azurefd.net')]",
              "sessionAffinityEnabledState": "Enabled",
              "sessionAffinityTtlSeconds": 0,
              "resourceState": "Enabled"
            }
          }
        ],
        "loadBalancingSettings": [
          {
            "name": "loadBalancingSettings1",
            "properties": {
              "additionalLatencyMilliseconds": 0,
              "sampleSize": 4,
              "successfulSamplesRequired": 2,
              "resourceState": "Enabled"
            }
          }
        ],
        "routingRules": [
          {
            "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/RoutingRules/site-route')]",
            "name": "site-route",
            "properties": {
              "frontendEndpoints": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/FrontendEndpoints/ms-account-profile-information-fd-azurefd-net')]"
                }
              ],
              "acceptedProtocols": [
                "Http",
                "Https"
              ],
              "patternsToMatch": [
                "/*"
              ],
              "enabledState": "Enabled",
              "resourceState": "Enabled",
              "routeConfiguration": {
                "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
                "forwardingProtocol": "HttpsOnly",
                "cacheConfiguration": {
                  "queryParameterStripDirective": "StripNone",
                  "dynamicCompression": "Enabled"
                },
                "backendPool": {
                  "id": "[concat(resourceId('Microsoft.Network/frontdoors', variables('frontDoorName')), '/BackendPools/ms-account-profile-information-site')]"
                }
              },
              "rulesEngine": {
                "id": "[resourceId('Microsoft.Network/frontdoors/rulesengines', variables('frontDoorName'), 'Redirect')]"
              }
            }
          }
        ],
        "enabledState": "Enabled",
        "friendlyName": "[variables('frontDoorName')]"
      }
    }
  ],
  "outputs": {
    "applicationInsightsKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), providers('Microsoft.Insights', 'components').apiVersions[0]).InstrumentationKey]"
    }
  }
}
